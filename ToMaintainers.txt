这里描述如何维护 CMake 配置文件. 如果你不需要增加或减少源文
件, 而只是修改已有的源文件, 那么你可以不用关心这篇文档.

注意不要修改生成出的 VS 工程文件, 而应该去修改 生成这些 VS
工程文件的 CMake 配置文件.

* 增加/减少 .cpp 文件
    需要看相应文件夹下的 CMakeLists.txt 里是否有一个 .cpp 文
    件的列表. 如果有这个列表, 你需要根据情况进行维护. 如果没
    有, 那么 .cpp 文件是自动递归 (包含子文件夹下的文件) 的在
    当前文件夹下找的, 一般不需要做修改.

    现在大部分 CMakeLists.txt 都是自动递归的找 .cpp 的, 所以
    一般都不需要修改 CMakeLists.txt

* 增加/减少 .h 文件
    如果是放在 Include 文件夹里, 一般不会有问题. 如果是其他
    地方, 有可能需要修改 CMakeLists.txt, 增加/减少
    include_directories()

    .h 的查找顺序为:
        Include/external
        Include
        ${EXTRA_INCLUDE}
        其他

* 增加/减少 '资源'文件, 包括.m
    有可能需要修改 相应文件夹下的 CMakeLists.txt 的 install()

* 增加/减少 target
    CMake/Utils.cmake 里有一些辅助的 macro. 使用方法见文件里
    的注释.

* 外部库
    CMake 对部分常见的库提供 FindXXX.cmake, 对于这些库使用
    find_package() 来进行查找位置.

    而对于其他的库, 有3个选择
        1 找到靠谱的 FindXXX.cmake, 放在 CMake 文件夹里,
          然后使用 find_package()
        2 使用 find_library(), 并且让用户在 EXTRA_INCLUDE 里
          提供头文件位置
        3 自己写 FindXXX.cmake (尽量避免)
    现在的情况是, 全部使用第2个选择
